name: iOS TestFlight (stable)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: false
          
      - name: Install provisioning profile from repo
        run: |
          set -euo pipefail
          PROFILE_FILE="ios/profiles/VisionGram_AppStore_Push.mobileprovision"
          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILE_DIR"
      
          PROFILE_PLIST=$(/usr/bin/security cms -D -i "$PROFILE_FILE" | plutil -convert xml1 -o - -)
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$PROFILE_PLIST" | tr -d '\r')
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin <<< "$PROFILE_PLIST" | tr -d '\r')
      
          echo "Profile Name: $PROFILE_NAME"
          echo "Profile UUID: $PROFILE_UUID"
      
          cp "$PROFILE_FILE" "$PROFILE_DIR/${PROFILE_UUID}.mobileprovision"
      
          echo "PROFILE_UUID=$PROFILE_UUID" >> "$GITHUB_ENV"
          echo "PROFILE_NAME=$PROFILE_NAME" >> "$GITHUB_ENV"

      - name: Install Fastlane & CocoaPods (pinned)
        run: |
          gem install fastlane -N
          gem install cocoapods -v 1.14.3 -N
          fastlane --version
          pod --version

      - name: Set up Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # IMPORT CERT + PROFILE (sets PROFILE_UUID / PROFILE_NAME)
      - name: Import distribution cert & profile into CI keychain
        shell: bash
        env:
          CI_KEYCHAIN_PW:      ${{ secrets.CI_KEYCHAIN_PW }}
          DIST_P12_BASE64:     ${{ secrets.DIST_P12_BASE64 }}
          DIST_P12_PASSWORD:   ${{ secrets.DIST_P12_PASSWORD }}
          DIST_PROFILE_BASE64: ${{ secrets.DIST_PROFILE_BASE64 }}
        run: |
          set -euo pipefail
          KEYCHAIN="$HOME/Library/Keychains/ci_keychain-db"
          echo "$DIST_P12_BASE64" | base64 -d > dist.p12
          security import dist.p12 -k "$KEYCHAIN" -P "$DIST_P12_PASSWORD" \
            -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/productbuild -T /usr/bin/productsign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$CI_KEYCHAIN_PW" "$KEYCHAIN"
          echo "$DIST_PROFILE_BASE64" | base64 -d > dist.mobileprovision
          PROFILE_XML=$(/usr/bin/security cms -D -i dist.mobileprovision | plutil -convert xml1 -o - -)
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$PROFILE_XML" | tr -d '\r')
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin <<< "$PROFILE_XML" | tr -d '\r')
          APP_ID=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' /dev/stdin <<< "$PROFILE_XML" | tr -d '\r')
          echo "Profile Name: $PROFILE_NAME"
          echo "Profile UUID: $PROFILE_UUID"
          echo "Profile AppID: $APP_ID"
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp dist.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/${PROFILE_UUID}.mobileprovision"
          echo "PROFILE_NAME=$PROFILE_NAME" >> "$GITHUB_ENV"
          echo "PROFILE_UUID=$PROFILE_UUID" >> "$GITHUB_ENV"

      - name: Show discovered profile name
        run: echo "PROFILE_NAME=$PROFILE_NAME / UUID=$PROFILE_UUID"

      - name: Pod repo update
        run: bash -lc 'cd "ios" && pod repo update'

      - name: Pod install
        run: bash -lc 'cd "ios" && pod install --repo-update'

      # TEMPORARY BYPASS: remove push requirement (delete to keep push)
      - name: Remove push entitlements for Release (temporary)
        run: |
          ENT="ios/VisionGram/VisionGram.entitlements"
          if [ -f "$ENT" ]; then
            /usr/libexec/PlistBuddy -c "Delete :aps-environment" "$ENT" || true
            echo "Edited entitlements:"
            /usr/libexec/PlistBuddy -c "Print" "$ENT" || true
          fi

      - name: Show Xcode app Release build settings (preflight)
        run: |
          xcodebuild -showBuildSettings \
            -workspace ios/VisionGram.xcworkspace \
            -scheme VisionGram \
            -configuration Release 2>/dev/null | \
            egrep 'PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|CODE_SIGN_IDENTITY|PROVISIONING_PROFILE_SPECIFIER' || true

      - name: Show Pods aggregate Release build settings (preflight)
        run: |
          if [ -f ios/Pods/Pods.xcodeproj/project.pbxproj ]; then
            xcodebuild -showBuildSettings \
              -project ios/Pods/Pods.xcodeproj \
              -scheme "Pods-VisionGram" \
              -configuration Release 2>/dev/null | \
              egrep 'CODE_SIGN_STYLE|PROVISIONING_PROFILE_SPECIFIER|DEVELOPMENT_TEAM' || true
          fi

      - name: Fastlane (build & upload to TestFlight)
        env:
          APP_IDENTIFIER: ${{ secrets.APP_IDENTIFIER }}
          TEAM_ID:        ${{ secrets.TEAM_ID }}
          IOS_SCHEME:     ${{ vars.IOS_SCHEME }}
          ASC_KEY_ID:     ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID:  ${{ secrets.ASC_ISSUER_ID }}
          ASC_API_KEY_P8: ${{ secrets.ASC_API_KEY_P8 }}
          CI_KEYCHAIN_PW: ${{ secrets.CI_KEYCHAIN_PW }}
          PROFILE_NAME:   ${{ env.PROFILE_NAME }}
          PROFILE_UUID:   ${{ env.PROFILE_UUID }}
        run: fastlane ios ci_beta

      - name: Show gym log tail (debug)
        if: always()
        run: tail -n 500 ~/Library/Logs/gym/VisionGram-VisionGram.log || true

      - name: Upload gym logs (artifact)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gym-logs
          path: ~/Library/Logs/gym/
