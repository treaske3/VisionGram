name: ios TestFlight Beta via Expo EAS

on:
  workflow_dispatch:

jobs:
  build-submit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Expo login (EXPO_TOKEN)
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Write App Store Connect API key JSON
        run: echo "${{ secrets.APP_STORE_CONNECT_API_KEY_JSON }}" > asc_api_key.json

      - name: Install EAS CLI
        run: npm install --global eas-cli

      - name: Prepare ASC API key values in eas.json
        run: |
          node -e "const fs = require('fs');\nconst asc = JSON.parse(fs.readFileSync('asc_api_key.json', 'utf8'));\nlet eas;\ntry { eas = JSON.parse(fs.readFileSync('eas.json', 'utf8')); } catch (e) { eas = {}; }\nif (!eas.submit) eas.submit = {};\nif (!eas.submit.production) eas.submit.production = {};\nif (!eas.submit.production.ios) eas.submit.production.ios = {};\n// Write .p8 key file\nif (asc.key) { fs.writeFileSync('asc_key.p8', asc.key); }\n// Set API key fields\nif (asc.key_id) { eas.submit.production.ios.ascApiKeyId = asc.key_id; }\nif (asc.issuer_id) { eas.submit.production.ios.ascApiKeyIssuerId = asc.issuer_id; }\neas.submit.production.ios.ascApiKeyPath = './asc_key.p8';\n// Ensure company name\nif (!eas.submit.production.ios.companyName) { eas.submit.production.ios.companyName = 'VisionGram'; }\nfs.writeFileSync('eas.json', JSON.stringify(eas, null, 2));"

      - name: EAS Build and Submit (iOS)
        run: eas build --platform ios --profile production --non-interactive --auto-submit-with-profile production
