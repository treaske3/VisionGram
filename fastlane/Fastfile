# fastlane/Fastfile
default_platform(:ios)

platform :ios do
  desc "CI build + upload to TestFlight"
  lane :ci_beta do
    require "base64"
    require "tmpdir"

    UI.message("‚û°Ô∏è  Creating CI keychain")
    create_keychain(
      name: "ci_keychain",
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      add_to_search_list: true,
      password: ENV.fetch("KEYCHAIN_PASSWORD", "ci_password")
    )

    UI.message("‚û°Ô∏è  Installing provisioning profile from repo")
    profile_path = "ios/profiles/VisionGram_AppStore_Push.mobileprovision"
    UI.user_error!("Missing #{profile_path}. Commit the .mobileprovision there.") unless File.exist?(profile_path)

    # Put the profile where Xcode expects it and grab its UUID
    profile_uuid = install_provisioning_profile(path: profile_path)

    # Read the human name (specifier) for export options
    profile_name_cmd = %Q[/usr/bin/security cms -D -i "#{profile_path}" | \
      /usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin | tr -d '\\r']
    profile_name = sh(profile_name_cmd).strip
    UI.message("Provisioning profile installed:")
    UI.message("  Name: #{profile_name}")
    UI.message("  UUID: #{profile_uuid}")

    UI.message("‚û°Ô∏è  Importing distribution certificate (.p12)")
    if ENV["DIST_CERT_P12_BASE64"].to_s.strip.empty?
      UI.important("DIST_CERT_P12_BASE64 not set. Assuming certificate already present on runner.")
    else
      p12_tmp = File.join(Dir.tmpdir, "dist.p12")
      File.binwrite(p12_tmp, Base64.decode64(ENV["DIST_CERT_P12_BASE64"]))
      import_certificate(
        certificate_path: p12_tmp,
        certificate_password: ENV["DIST_CERT_PASSWORD"],
        keychain_name: "ci_keychain",
        keychain_password: ENV.fetch("KEYCHAIN_PASSWORD", "ci_password")
      )
    end

    UI.message("‚û°Ô∏è  App Store Connect API key (for upload)")
    app_store_connect_api_key(
      key_id:               ENV["ASC_KEY_ID"],
      issuer_id:            ENV["ASC_ISSUER_ID"],
      key_content:          ENV["ASC_KEY_CONTENT"], # base64 of .p8 content
      is_key_content_base64: true,
      in_house:             false
    )

    UI.message("‚û°Ô∏è  Pods")
    sh("cd ios && pod repo update")
    sh("cd ios && pod install --repo-update")

    UI.message("‚û°Ô∏è  Set manual signing on app target (Release only)")
    update_project_team(
      path: "ios/VisionGram.xcodeproj",
      teamid: ENV.fetch("TEAM_ID")
    )

    update_code_signing_settings(
      use_automatic_signing: false,
      path: "ios/VisionGram.xcodeproj",
      targets: ["VisionGram"],             # only the app target (not Pods)
      build_configurations: ["Release"],
      code_sign_identity: "Apple Distribution",
      profile_uuid: profile_uuid,          # <- ensure the app target uses THIS profile
      bundle_identifier: ENV.fetch("APP_IDENTIFIER")
    )

    UI.message("‚û°Ô∏è  Build & export (manual signing)")
    build_ios_app(
      workspace: "ios/VisionGram.xcworkspace",
      scheme: "VisionGram",
      configuration: "Release",
      export_method: "app-store",
      clean: true,
      include_bitcode: false,
      # These options control the .ipa export phase and help Xcode pick the right profile again
      export_options: {
        signingStyle: "manual",
        teamID: ENV["TEAM_ID"],
        provisioningProfiles: {
          ENV["APP_IDENTIFIER"] => profile_name
        }
      }
    )

    UI.message("‚û°Ô∏è  Upload to TestFlight")
    upload_to_testflight(
      skip_waiting_for_build_processing: true
    )

  ensure
    UI.message("üßπ Cleaning up CI keychain")
    delete_keychain(name: "ci_keychain")
  end
end
